{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"polars-random docs","text":"<p>Polars plugin for generating random distributions.</p>"},{"location":"#description","title":"Description","text":"<p><code>polars-random</code> is a Rust plugin for the Polars DataFrame library that provides functionality to generate random numbers through a new dataframe namespace called \"random\". It supports generating random numbers from various distributions such as uniform, normal, and binomial.</p> <p>You can set seeds, and pass the parameters as polars expressions or column names (as strings).</p>"},{"location":"#installation","title":"Installation","text":"<p>To use <code>polars-random</code>, install it using your favourite tool:</p> <pre><code>uv add polars-random\n</code></pre> <pre><code>poetry add polars-random\n</code></pre> <pre><code>pip install polars-random\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>For every available distribution, parameters can be passed as <code>polars expressions</code> or native python objects (<code>int</code>, <code>float</code>, <code>string</code>...).</p> <p>Here are some examples of how to use the <code>polars-random</code> plugin for generating uniform distributions:</p> <pre><code>import polars as pl\n# This will automatically register .random\n# in pl.DataFrame namespace\nimport polars_random\n\ndf: pl.DataFrame = ...\n</code></pre> <p>If we want to generate a new uniform column called <code>rand</code> based on some parameters:</p> <pre><code>(\n    df\n    .random.rand(\n        low=1_000.,\n        high=2_000.,\n        name=\"rand\",\n    )\n)\n</code></pre> <p>We can also add a <code>seed</code> and make the generation reproducible. In the following case, we are using default parameters (<code>low=1.</code> and <code>high=1.</code>) and generating a uniform distribution called <code>rand_seed</code>:</p> <pre><code>(\n    df\n    .random.rand(\n        seed=42, \n        name=\"rand_seed\",\n    )\n</code></pre> <p>If we want custom parameters, we can use <code>polars expressions</code>. Let's say we have two columns called <code>custom_low</code> and <code>custom_high</code>. For generating a new column, we can use either the expression <code>pl.col(\"custom_low\")</code> or a python string <code>\"custom_low\"</code>:</p> <pre><code>(\n    df\n    .random.rand(\n        low=pl.col(\"custom_low\"),\n        high=pl.col(\"custom_high\"),\n        name=\"rand_expr\",\n    )\n    .random.rand(\n        low=\"custom_low\",\n        high=\"custom_high\",\n        name=\"rand_str\",\n    )\n)\n</code></pre>"},{"location":"#distributions","title":"Distributions","text":""},{"location":"#uniform-distribution","title":"Uniform distribution","text":"<pre><code>import polars as pl\nimport polars_random\n\ndf: pl.DataFrame = ...\n\nrandom_series = (\n    df\n    .random.rand(low=1_000., high=2_000., name=\"rand\")\n    .random.rand(seed=42, name=\"rand_seed\")\n    .random.rand(\n        low=pl.col(\"custom_low\"),\n        high=pl.col(\"custom_high\"),\n        name=\"rand_expr\",\n    )\n    .random.rand(\n        mean=\"custom_low\",\n        std=\"custom_high\",\n        name=\"rand_str\",\n    )\n)\n</code></pre>"},{"location":"#normal-distribution","title":"Normal Distribution","text":"<pre><code>import polars as pl\nimport polars_random\n\ndf: pl.DataFrame = ...\n\nrandom_series = (\n    df\n    .random.normal(mean=3., std=2., name=\"normal\")\n    .random.normal(seed=42, name=\"normal_seed\")\n    .random.normal(\n        mean=pl.col(\"custom_mean\"),\n        std=pl.col(\"custom_std\"),\n        name=\"normal_expr\",\n    )\n    .random.normal(\n        mean=\"custom_mean\",\n        std=\"custom_std\",\n        name=\"normal_str\",\n    )\n)\n</code></pre>"},{"location":"#binomial-distribution","title":"Binomial Distribution","text":"<pre><code>import polars as pl\nimport polars_random\n\ndf: pl.DataFrame = ...\n\nrandom_series = (\n    df\n    # Mandatory parameters n and p\n    .random.binomial(n=100, p=.5, seed=42, name=\"binomial\")\n    .random.binomial(\n        n=pl.col(\"custom_n\"),\n        p=pl.col(\"custom_p\"),\n        name=\"binomial_expr\",\n    )\n    .random.binomial(\n        n=\"n\",\n        p=\"p\",\n        name=\"binomial_str\",\n    )\n)\n</code></pre>"},{"location":"api_reference/","title":"API Reference","text":""},{"location":"api_reference/#pldataframerandom","title":"<code>pl.DataFrame.random</code>","text":"<p>Namespace for generating new columns in the dataframe containing statistical distributions.</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>The dataframe to apply the random functions on.</p> required Source code in <code>polars_random/__init__.py</code> <pre><code>@pl.api.register_dataframe_namespace(\"random\")\nclass Random:\n    \"\"\"\n    Namespace for generating new columns in the dataframe containing statistical distributions.\n\n    Parameters\n    ----------\n    df : pl.DataFrame\n        The dataframe to apply the random functions on.\n    \"\"\"\n\n    def __init__(self, df: pl.DataFrame) -&gt; None:\n        self._df = df\n        self._temp_name = \"__temp__\"\n\n    def rand(\n        self,\n        low: float | pl.Expr | str | None = None,\n        high: float | pl.Expr | str | None = None,\n        seed: int | None = None,\n        name: str | None = None,\n    ) -&gt; pl.DataFrame:\n        \"\"\"\n        Generate a random number column.\n\n        Parameters\n        ----------\n        low : float or None, optional\n            Lower boundary for uniform distribution.\n        high : float or None, optional\n            Higher boundary for uniform distribution.\n        seed : int or None, optional\n            The seed value for the random number generator, by default None.\n        name : str or None, optional\n            Name for the generated column. Default value: \"rand\".\n\n        Returns\n        -------\n        pl.DataFrame\n            The dataframe with the random number column applied.\n\n        Examples\n        --------\n        &gt;&gt;&gt; df = pl.DataFrame({\"a\": [1, 2, 3]})\n        &gt;&gt;&gt; df.random.rand(seed=42, name=\"random\")\n        shape: (3, 2)\n        \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n        \u2502 a   \u2502 random     \u2502\n        \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n        \u2502 i64 \u2502 f64        \u2502\n        \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n        \u2502 1   \u2502 0.37454012 \u2502\n        \u2502 2   \u2502 0.95071431 \u2502\n        \u2502 3   \u2502 0.73199394 \u2502\n        \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n        \"\"\"\n        _check_seed(seed)\n        if (isinstance(low, (pl.Expr, str)) and not isinstance(high, (pl.Expr, str))) or (\n            isinstance(high, (pl.Expr, str)) and not isinstance(low, (pl.Expr, str))\n        ):\n            raise Exception(\n                \"Both low and high must be either expressions/str or floats (a mix is not allowed!)\"\n            )\n\n        if isinstance(low, pl.Expr):\n            low = low.cast(pl.Float64)\n        if isinstance(high, pl.Expr):\n            high = high.cast(pl.Float64)\n        if isinstance(low, str):\n            low = pl.col(low).cast(pl.Float64)\n        if isinstance(high, str):\n            high = pl.col(high).cast(pl.Float64)\n\n        if isinstance(low, (pl.Expr, str)) and isinstance(high, (pl.Expr, str)):\n            return self._df.with_columns(\n                register_plugin_function(\n                    args=[low, high],\n                    plugin_path=LIB,\n                    function_name=\"rand_expr\",\n                    is_elementwise=True,\n                    kwargs={\"seed\": seed},\n                ).alias(name or \"rand\")\n            )\n        else:\n            return (\n                self._df.with_columns(\n                    pl.lit(0.0).alias(self._temp_name),\n                )\n                .with_columns(\n                    register_plugin_function(\n                        args=pl.col(\"__temp__\"),\n                        plugin_path=LIB,\n                        function_name=\"rand\",\n                        is_elementwise=True,\n                        kwargs={\n                            \"low\": low,\n                            \"high\": high,\n                            \"seed\": seed,\n                        },\n                    ).alias(name or \"rand\")\n                )\n                .drop(self._temp_name)\n            )\n\n    uniform = rand\n\n    def normal(\n        self,\n        mean: float | pl.Expr | str | None = 0.0,\n        std: float | pl.Expr | str | None = 1.0,\n        seed: int | None = None,\n        name: str | None = None,\n    ) -&gt; pl.DataFrame:\n        \"\"\"\n        Generate a normal distribution random number column.\n\n        Parameters\n        ----------\n        mean : float or None, optional\n            The mean of the normal distribution, by default 0.0.\n        std : float or None, optional\n            The standard deviation of the normal distribution, by default 1.0.\n        seed : float or None, optional\n            The seed value for the random number generator, by default None.\n        name : str or None, optional\n            Name for the generated column. Default value: \"normal\".\n\n        Returns\n        -------\n        pl.DataFrame\n            The dataframe with the normal distribution random number generator applied.\n\n        Examples\n        --------\n        &gt;&gt;&gt; df = pl.DataFrame({\"a\": [1, 2, 3]})\n        &gt;&gt;&gt; df.random.normal(mean=0, std=1, seed=42, name=\"normal\")\n        shape: (3, 2)\n        \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n        \u2502 a   \u2502 normal     \u2502\n        \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n        \u2502 i64 \u2502 f64        \u2502\n        \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n        \u2502 1   \u2502 0.49671415 \u2502\n        \u2502 2   \u2502 -0.1382643 \u2502\n        \u2502 3   \u2502 0.64768854 \u2502\n        \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n        \"\"\"\n        _check_seed(seed)\n        if (isinstance(mean, (pl.Expr, str)) and not isinstance(std, (pl.Expr, str))) or (\n            isinstance(std, (pl.Expr, str)) and not isinstance(mean, (pl.Expr, str))\n        ):\n            raise Exception(\n                \"Both mean and std must be either expressions/str or floats (a mix is not allowed!)\"\n            )\n\n        if isinstance(mean, pl.Expr):\n            mean = mean.cast(pl.Float64)\n        if isinstance(std, pl.Expr):\n            std = std.cast(pl.Float64)\n        if isinstance(mean, str):\n            mean = pl.col(mean).cast(pl.Float64)\n        if isinstance(std, str):\n            std = pl.col(std).cast(pl.Float64)\n\n        if isinstance(mean, (pl.Expr, str)) and isinstance(std, (pl.Expr, str)):\n            return self._df.with_columns(\n                register_plugin_function(\n                    args=[mean, std],\n                    plugin_path=LIB,\n                    function_name=\"normal_expr\",\n                    is_elementwise=True,\n                    kwargs={\"seed\": seed},\n                ).alias(name or \"normal\")\n            )\n        else:\n            return (\n                self._df.with_columns(\n                    pl.lit(0.0).alias(self._temp_name),\n                )\n                .with_columns(\n                    register_plugin_function(\n                        args=pl.col(\"__temp__\"),\n                        plugin_path=LIB,\n                        function_name=\"normal\",\n                        is_elementwise=True,\n                        kwargs={\"mean\": mean, \"std\": std, \"seed\": seed},\n                    ).alias(name or \"normal\")\n                )\n                .drop(self._temp_name)\n            )\n\n    def binomial(\n        self,\n        n: pl.Expr | int,\n        p: pl.Expr | float,\n        seed: int | None = None,\n        name: str | None = None,\n    ) -&gt; pl.DataFrame:\n        \"\"\"\n        Generate a binomial distribution random number expression.\n\n        Parameters\n        ----------\n        n : int\n            The number of trials.\n        p : float\n            The probability of success.\n        seed : int or None, optional\n            The seed value for the random number generator, by default None.\n        name : str or None, optional\n            Name for the generated column. Default value: \"binomial\".\n\n        Returns\n        -------\n        pl.DataFrame\n            The expression with the binomial distribution random number generator applied.\n\n        Examples\n        --------\n        &gt;&gt;&gt; df = pl.DataFrame({\"a\": [1, 2, 3]})\n        &gt;&gt;&gt; df.random.binomial(n=10, p=0.5, seed=42)\n        shape: (3, 2)\n        \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n        \u2502 a   \u2502 binomial   \u2502\n        \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n        \u2502 i64 \u2502 i64        \u2502\n        \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n        \u2502 1   \u2502 5          \u2502\n        \u2502 2   \u2502 5          \u2502\n        \u2502 3   \u2502 7          \u2502\n        \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n        \"\"\"\n        _check_seed(seed)\n        if (isinstance(n, (pl.Expr, str)) and not isinstance(p, (pl.Expr, str))) or (\n            isinstance(p, (pl.Expr, str)) and not isinstance(n, (pl.Expr, str))\n        ):\n            raise Exception(\n                \"Both n and p must be either expressions/str or floats (a mix is not allowed!)\"\n            )\n        if isinstance(p, (float, int)):\n            _check_probability(p)\n\n        if isinstance(n, pl.Expr):\n            n = n.cast(pl.UInt64)\n        if isinstance(n, str):\n            n = pl.col(n).cast(pl.UInt64)\n        if isinstance(p, pl.Expr):\n            p = p.cast(pl.Float64)\n        if isinstance(p, str):\n            p = pl.col(p).cast(pl.Float64)\n\n        if isinstance(n, (pl.Expr, str)) and isinstance(p, (pl.Expr, str)):\n            return self._df.with_columns(\n                register_plugin_function(\n                    args=[n, p],\n                    plugin_path=LIB,\n                    function_name=\"binomial_expr\",\n                    is_elementwise=True,\n                    kwargs={\"seed\": seed},\n                ).alias(name or \"binomial\")\n            )\n        else:\n            return (\n                self._df.with_columns(\n                    pl.lit(0.0).alias(self._temp_name),\n                )\n                .with_columns(\n                    register_plugin_function(\n                        args=pl.col(\"__temp__\"),\n                        plugin_path=LIB,\n                        function_name=\"binomial\",\n                        is_elementwise=True,\n                        kwargs={\"n\": n, \"p\": p, \"seed\": seed},\n                    ).alias(name or \"binomial\")\n                )\n                .drop(self._temp_name)\n            )\n</code></pre>"},{"location":"api_reference/#polars_random.Random.binomial","title":"<code>binomial(n, p, seed=None, name=None)</code>","text":"<p>Generate a binomial distribution random number expression.</p> <p>Parameters:</p> Name Type Description Default <code>n</code> <code>int</code> <p>The number of trials.</p> required <code>p</code> <code>float</code> <p>The probability of success.</p> required <code>seed</code> <code>int or None</code> <p>The seed value for the random number generator, by default None.</p> <code>None</code> <code>name</code> <code>str or None</code> <p>Name for the generated column. Default value: \"binomial\".</p> <code>None</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>The expression with the binomial distribution random number generator applied.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; df = pl.DataFrame({\"a\": [1, 2, 3]})\n&gt;&gt;&gt; df.random.binomial(n=10, p=0.5, seed=42)\nshape: (3, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 a   \u2502 binomial   \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 i64 \u2502 i64        \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1   \u2502 5          \u2502\n\u2502 2   \u2502 5          \u2502\n\u2502 3   \u2502 7          \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> Source code in <code>polars_random/__init__.py</code> <pre><code>def binomial(\n    self,\n    n: pl.Expr | int,\n    p: pl.Expr | float,\n    seed: int | None = None,\n    name: str | None = None,\n) -&gt; pl.DataFrame:\n    \"\"\"\n    Generate a binomial distribution random number expression.\n\n    Parameters\n    ----------\n    n : int\n        The number of trials.\n    p : float\n        The probability of success.\n    seed : int or None, optional\n        The seed value for the random number generator, by default None.\n    name : str or None, optional\n        Name for the generated column. Default value: \"binomial\".\n\n    Returns\n    -------\n    pl.DataFrame\n        The expression with the binomial distribution random number generator applied.\n\n    Examples\n    --------\n    &gt;&gt;&gt; df = pl.DataFrame({\"a\": [1, 2, 3]})\n    &gt;&gt;&gt; df.random.binomial(n=10, p=0.5, seed=42)\n    shape: (3, 2)\n    \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n    \u2502 a   \u2502 binomial   \u2502\n    \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n    \u2502 i64 \u2502 i64        \u2502\n    \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n    \u2502 1   \u2502 5          \u2502\n    \u2502 2   \u2502 5          \u2502\n    \u2502 3   \u2502 7          \u2502\n    \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n    \"\"\"\n    _check_seed(seed)\n    if (isinstance(n, (pl.Expr, str)) and not isinstance(p, (pl.Expr, str))) or (\n        isinstance(p, (pl.Expr, str)) and not isinstance(n, (pl.Expr, str))\n    ):\n        raise Exception(\n            \"Both n and p must be either expressions/str or floats (a mix is not allowed!)\"\n        )\n    if isinstance(p, (float, int)):\n        _check_probability(p)\n\n    if isinstance(n, pl.Expr):\n        n = n.cast(pl.UInt64)\n    if isinstance(n, str):\n        n = pl.col(n).cast(pl.UInt64)\n    if isinstance(p, pl.Expr):\n        p = p.cast(pl.Float64)\n    if isinstance(p, str):\n        p = pl.col(p).cast(pl.Float64)\n\n    if isinstance(n, (pl.Expr, str)) and isinstance(p, (pl.Expr, str)):\n        return self._df.with_columns(\n            register_plugin_function(\n                args=[n, p],\n                plugin_path=LIB,\n                function_name=\"binomial_expr\",\n                is_elementwise=True,\n                kwargs={\"seed\": seed},\n            ).alias(name or \"binomial\")\n        )\n    else:\n        return (\n            self._df.with_columns(\n                pl.lit(0.0).alias(self._temp_name),\n            )\n            .with_columns(\n                register_plugin_function(\n                    args=pl.col(\"__temp__\"),\n                    plugin_path=LIB,\n                    function_name=\"binomial\",\n                    is_elementwise=True,\n                    kwargs={\"n\": n, \"p\": p, \"seed\": seed},\n                ).alias(name or \"binomial\")\n            )\n            .drop(self._temp_name)\n        )\n</code></pre>"},{"location":"api_reference/#polars_random.Random.normal","title":"<code>normal(mean=0.0, std=1.0, seed=None, name=None)</code>","text":"<p>Generate a normal distribution random number column.</p> <p>Parameters:</p> Name Type Description Default <code>mean</code> <code>float or None</code> <p>The mean of the normal distribution, by default 0.0.</p> <code>0.0</code> <code>std</code> <code>float or None</code> <p>The standard deviation of the normal distribution, by default 1.0.</p> <code>1.0</code> <code>seed</code> <code>float or None</code> <p>The seed value for the random number generator, by default None.</p> <code>None</code> <code>name</code> <code>str or None</code> <p>Name for the generated column. Default value: \"normal\".</p> <code>None</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>The dataframe with the normal distribution random number generator applied.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; df = pl.DataFrame({\"a\": [1, 2, 3]})\n&gt;&gt;&gt; df.random.normal(mean=0, std=1, seed=42, name=\"normal\")\nshape: (3, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 a   \u2502 normal     \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 i64 \u2502 f64        \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1   \u2502 0.49671415 \u2502\n\u2502 2   \u2502 -0.1382643 \u2502\n\u2502 3   \u2502 0.64768854 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> Source code in <code>polars_random/__init__.py</code> <pre><code>def normal(\n    self,\n    mean: float | pl.Expr | str | None = 0.0,\n    std: float | pl.Expr | str | None = 1.0,\n    seed: int | None = None,\n    name: str | None = None,\n) -&gt; pl.DataFrame:\n    \"\"\"\n    Generate a normal distribution random number column.\n\n    Parameters\n    ----------\n    mean : float or None, optional\n        The mean of the normal distribution, by default 0.0.\n    std : float or None, optional\n        The standard deviation of the normal distribution, by default 1.0.\n    seed : float or None, optional\n        The seed value for the random number generator, by default None.\n    name : str or None, optional\n        Name for the generated column. Default value: \"normal\".\n\n    Returns\n    -------\n    pl.DataFrame\n        The dataframe with the normal distribution random number generator applied.\n\n    Examples\n    --------\n    &gt;&gt;&gt; df = pl.DataFrame({\"a\": [1, 2, 3]})\n    &gt;&gt;&gt; df.random.normal(mean=0, std=1, seed=42, name=\"normal\")\n    shape: (3, 2)\n    \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n    \u2502 a   \u2502 normal     \u2502\n    \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n    \u2502 i64 \u2502 f64        \u2502\n    \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n    \u2502 1   \u2502 0.49671415 \u2502\n    \u2502 2   \u2502 -0.1382643 \u2502\n    \u2502 3   \u2502 0.64768854 \u2502\n    \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n    \"\"\"\n    _check_seed(seed)\n    if (isinstance(mean, (pl.Expr, str)) and not isinstance(std, (pl.Expr, str))) or (\n        isinstance(std, (pl.Expr, str)) and not isinstance(mean, (pl.Expr, str))\n    ):\n        raise Exception(\n            \"Both mean and std must be either expressions/str or floats (a mix is not allowed!)\"\n        )\n\n    if isinstance(mean, pl.Expr):\n        mean = mean.cast(pl.Float64)\n    if isinstance(std, pl.Expr):\n        std = std.cast(pl.Float64)\n    if isinstance(mean, str):\n        mean = pl.col(mean).cast(pl.Float64)\n    if isinstance(std, str):\n        std = pl.col(std).cast(pl.Float64)\n\n    if isinstance(mean, (pl.Expr, str)) and isinstance(std, (pl.Expr, str)):\n        return self._df.with_columns(\n            register_plugin_function(\n                args=[mean, std],\n                plugin_path=LIB,\n                function_name=\"normal_expr\",\n                is_elementwise=True,\n                kwargs={\"seed\": seed},\n            ).alias(name or \"normal\")\n        )\n    else:\n        return (\n            self._df.with_columns(\n                pl.lit(0.0).alias(self._temp_name),\n            )\n            .with_columns(\n                register_plugin_function(\n                    args=pl.col(\"__temp__\"),\n                    plugin_path=LIB,\n                    function_name=\"normal\",\n                    is_elementwise=True,\n                    kwargs={\"mean\": mean, \"std\": std, \"seed\": seed},\n                ).alias(name or \"normal\")\n            )\n            .drop(self._temp_name)\n        )\n</code></pre>"},{"location":"api_reference/#polars_random.Random.rand","title":"<code>rand(low=None, high=None, seed=None, name=None)</code>","text":"<p>Generate a random number column.</p> <p>Parameters:</p> Name Type Description Default <code>low</code> <code>float or None</code> <p>Lower boundary for uniform distribution.</p> <code>None</code> <code>high</code> <code>float or None</code> <p>Higher boundary for uniform distribution.</p> <code>None</code> <code>seed</code> <code>int or None</code> <p>The seed value for the random number generator, by default None.</p> <code>None</code> <code>name</code> <code>str or None</code> <p>Name for the generated column. Default value: \"rand\".</p> <code>None</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>The dataframe with the random number column applied.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; df = pl.DataFrame({\"a\": [1, 2, 3]})\n&gt;&gt;&gt; df.random.rand(seed=42, name=\"random\")\nshape: (3, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 a   \u2502 random     \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 i64 \u2502 f64        \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1   \u2502 0.37454012 \u2502\n\u2502 2   \u2502 0.95071431 \u2502\n\u2502 3   \u2502 0.73199394 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> Source code in <code>polars_random/__init__.py</code> <pre><code>def rand(\n    self,\n    low: float | pl.Expr | str | None = None,\n    high: float | pl.Expr | str | None = None,\n    seed: int | None = None,\n    name: str | None = None,\n) -&gt; pl.DataFrame:\n    \"\"\"\n    Generate a random number column.\n\n    Parameters\n    ----------\n    low : float or None, optional\n        Lower boundary for uniform distribution.\n    high : float or None, optional\n        Higher boundary for uniform distribution.\n    seed : int or None, optional\n        The seed value for the random number generator, by default None.\n    name : str or None, optional\n        Name for the generated column. Default value: \"rand\".\n\n    Returns\n    -------\n    pl.DataFrame\n        The dataframe with the random number column applied.\n\n    Examples\n    --------\n    &gt;&gt;&gt; df = pl.DataFrame({\"a\": [1, 2, 3]})\n    &gt;&gt;&gt; df.random.rand(seed=42, name=\"random\")\n    shape: (3, 2)\n    \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n    \u2502 a   \u2502 random     \u2502\n    \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n    \u2502 i64 \u2502 f64        \u2502\n    \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n    \u2502 1   \u2502 0.37454012 \u2502\n    \u2502 2   \u2502 0.95071431 \u2502\n    \u2502 3   \u2502 0.73199394 \u2502\n    \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n    \"\"\"\n    _check_seed(seed)\n    if (isinstance(low, (pl.Expr, str)) and not isinstance(high, (pl.Expr, str))) or (\n        isinstance(high, (pl.Expr, str)) and not isinstance(low, (pl.Expr, str))\n    ):\n        raise Exception(\n            \"Both low and high must be either expressions/str or floats (a mix is not allowed!)\"\n        )\n\n    if isinstance(low, pl.Expr):\n        low = low.cast(pl.Float64)\n    if isinstance(high, pl.Expr):\n        high = high.cast(pl.Float64)\n    if isinstance(low, str):\n        low = pl.col(low).cast(pl.Float64)\n    if isinstance(high, str):\n        high = pl.col(high).cast(pl.Float64)\n\n    if isinstance(low, (pl.Expr, str)) and isinstance(high, (pl.Expr, str)):\n        return self._df.with_columns(\n            register_plugin_function(\n                args=[low, high],\n                plugin_path=LIB,\n                function_name=\"rand_expr\",\n                is_elementwise=True,\n                kwargs={\"seed\": seed},\n            ).alias(name or \"rand\")\n        )\n    else:\n        return (\n            self._df.with_columns(\n                pl.lit(0.0).alias(self._temp_name),\n            )\n            .with_columns(\n                register_plugin_function(\n                    args=pl.col(\"__temp__\"),\n                    plugin_path=LIB,\n                    function_name=\"rand\",\n                    is_elementwise=True,\n                    kwargs={\n                        \"low\": low,\n                        \"high\": high,\n                        \"seed\": seed,\n                    },\n                ).alias(name or \"rand\")\n            )\n            .drop(self._temp_name)\n        )\n</code></pre>"}]}